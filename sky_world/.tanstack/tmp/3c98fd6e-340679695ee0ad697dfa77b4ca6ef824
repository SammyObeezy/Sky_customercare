/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthenticatedRouteImport } from './routes/_unauthenticated'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as UnauthenticatedRegisterRouteImport } from './routes/_unauthenticated/register'
import { Route as UnauthenticatedLoginRouteImport } from './routes/_unauthenticated/login'
import { Route as UnauthenticatedForgotPasswordRouteImport } from './routes/_unauthenticated/forgot-password'
import { Route as AuthenticatedAddTicketIndexRouteImport } from './routes/_authenticated/add-ticket/index'

const UnauthenticatedRoute = UnauthenticatedRouteImport.update({
  id: '/_unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const UnauthenticatedRegisterRoute = UnauthenticatedRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => UnauthenticatedRoute,
} as any)
const UnauthenticatedLoginRoute = UnauthenticatedLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnauthenticatedRoute,
} as any)
const UnauthenticatedForgotPasswordRoute =
  UnauthenticatedForgotPasswordRouteImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => UnauthenticatedRoute,
  } as any)
const AuthenticatedAddTicketIndexRoute =
  AuthenticatedAddTicketIndexRouteImport.update({
    id: '/add-ticket/',
    path: '/add-ticket/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/forgot-password': typeof UnauthenticatedForgotPasswordRoute
  '/login': typeof UnauthenticatedLoginRoute
  '/register': typeof UnauthenticatedRegisterRoute
  '/': typeof AuthenticatedIndexRoute
  '/add-ticket': typeof AuthenticatedAddTicketIndexRoute
}
export interface FileRoutesByTo {
  '/forgot-password': typeof UnauthenticatedForgotPasswordRoute
  '/login': typeof UnauthenticatedLoginRoute
  '/register': typeof UnauthenticatedRegisterRoute
  '/': typeof AuthenticatedIndexRoute
  '/add-ticket': typeof AuthenticatedAddTicketIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_unauthenticated': typeof UnauthenticatedRouteWithChildren
  '/_unauthenticated/forgot-password': typeof UnauthenticatedForgotPasswordRoute
  '/_unauthenticated/login': typeof UnauthenticatedLoginRoute
  '/_unauthenticated/register': typeof UnauthenticatedRegisterRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/add-ticket/': typeof AuthenticatedAddTicketIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/forgot-password' | '/login' | '/register' | '/' | '/add-ticket'
  fileRoutesByTo: FileRoutesByTo
  to: '/forgot-password' | '/login' | '/register' | '/' | '/add-ticket'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_unauthenticated'
    | '/_unauthenticated/forgot-password'
    | '/_unauthenticated/login'
    | '/_unauthenticated/register'
    | '/_authenticated/'
    | '/_authenticated/add-ticket/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  UnauthenticatedRoute: typeof UnauthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unauthenticated': {
      id: '/_unauthenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_unauthenticated/register': {
      id: '/_unauthenticated/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof UnauthenticatedRegisterRouteImport
      parentRoute: typeof UnauthenticatedRoute
    }
    '/_unauthenticated/login': {
      id: '/_unauthenticated/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnauthenticatedLoginRouteImport
      parentRoute: typeof UnauthenticatedRoute
    }
    '/_unauthenticated/forgot-password': {
      id: '/_unauthenticated/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof UnauthenticatedForgotPasswordRouteImport
      parentRoute: typeof UnauthenticatedRoute
    }
    '/_authenticated/add-ticket/': {
      id: '/_authenticated/add-ticket/'
      path: '/add-ticket'
      fullPath: '/add-ticket'
      preLoaderRoute: typeof AuthenticatedAddTicketIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedAddTicketIndexRoute: typeof AuthenticatedAddTicketIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedAddTicketIndexRoute: AuthenticatedAddTicketIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface UnauthenticatedRouteChildren {
  UnauthenticatedForgotPasswordRoute: typeof UnauthenticatedForgotPasswordRoute
  UnauthenticatedLoginRoute: typeof UnauthenticatedLoginRoute
  UnauthenticatedRegisterRoute: typeof UnauthenticatedRegisterRoute
}

const UnauthenticatedRouteChildren: UnauthenticatedRouteChildren = {
  UnauthenticatedForgotPasswordRoute: UnauthenticatedForgotPasswordRoute,
  UnauthenticatedLoginRoute: UnauthenticatedLoginRoute,
  UnauthenticatedRegisterRoute: UnauthenticatedRegisterRoute,
}

const UnauthenticatedRouteWithChildren = UnauthenticatedRoute._addFileChildren(
  UnauthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  UnauthenticatedRoute: UnauthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
